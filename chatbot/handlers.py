"""
Aqui nesse m√≥dulo cont√©m todas as fun√ß√µes de callback 
(handlers) que respondem √†s intera√ß√µes do usu√°rio no Telegram.

Cada fun√ß√£o √© respons√°vel por uma etapa espec√≠fica do fluxo de conversa do bot.

"""

from telegram import Update, InlineKeyboardMarkup,InlineKeyboardButton
from telegram.ext import ContextTypes,ConversationHandler
import telegram.constants


#Importando os objetos e fun√ß√µes de outros m√≥dulos do pacote

from . import nlp as sintomas
from .config import model,logger


# Definido os estados da conversa para serem usados aqui e no bot.py
CHOOSING, DESCRIBING_SYMPTOMS = range(2)


# PASSO 1: Onde o usu√°rio escrever o /start, esssa fun√ß√£o √© chamada

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Inicia a conversa e mostra o menu de bot√µes."""

    teclado = [
        InlineKeyboardButton("ü©∫ Iniciar Consulta B√°sica", callback_data='iniciar_consulta'),
        InlineKeyboardButton("‚ùì Como funciona?", callback_data='como_funciona')
    ]
    reply_markup = InlineKeyboardMarkup.from_column(teclado)
    mensagem_boas_vindas = "Ol√°, eu sou seu assistente virtual de sa√∫de ü§ñü©∫. \n\nSelecione alguma dessas op√ß√µes abaixo para come√ßar:"
    await update.message.reply_text(mensagem_boas_vindas, reply_markup=reply_markup)

    return CHOOSING

# PASSO 2: Usu√°rio clica no bot√£o de "IniciarConsulta"

async def prompt_for_symptoms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """""Responde ao clique do bot√£o e isso pede ao usu√°rio escrever os sintomas que sente"""
    query = update.callback_query
    await query.answer()


# Aqui edita a mensagem do bot√£o para pedir os sintomas
    await query.edit_message_text(text="Entendido.\n\nPor favor, descreva quais s√£o os sintomas que voc√™ sente nesse momento.")
    
    return DESCRIBING_SYMPTOMS


# Passo 3: Usu√°rio digita os sintomas, e ap√≥s disso a fun√ß√£o √© chamada

async def analyze_symptoms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Analisa os sintomas usando a IA com um prompt aprimorado e salva no banco."""
    user = update.message.from_user
    symptoms = update.message.text
    
    # MODIFICA√á√ÉO 1: Mensagem de espera um pouco mais amig√°vel.
    await update.message.reply_text(
        "Obrigado por compartilhar. Estou analisando suas informa√ß√µes com cuidado... ü§î"
    )

    # MODIFICA√á√ÉO 2 (A PRINCIPAL): O prompt foi completamente reescrito.
    # Agora ele define uma persona, um tom de voz e a estrutura da resposta.
    prompt = f"""
    **Sua Persona:** Voc√™ √© um assistente de triagem virtual. Seu tom deve ser calmo, emp√°tico, profissional e muito acolhedor. Voc√™ NUNCA deve alarmar o paciente.

    **Tarefa:** Analise os sintomas de um paciente e forne√ßa uma resposta amig√°vel e informativa.

    **Sintomas do Paciente:** "{symptoms}"

    **Formato da sua resposta:**
    1.  Comece com uma sauda√ß√£o calorosa, como "Ol√°! Agrade√ßo por confiar em mim para compartilhar como voc√™ est√° se sentindo."
    2.  Apresente a an√°lise de forma did√°tica, explicando o que os sintomas podem sugerir. Use uma linguagem simples.
    3.  Apresente as sugest√µes (m√©dico, exames) como recomenda√ß√µes para uma conversa com um profissional de verdade.
    4.  **AVISO OBRIGAT√ìRIO:** Termine SEMPRE com o seguinte aviso, exatamente como est√° escrito:
        "**Aten√ß√£o:** Eu sou uma intelig√™ncia artificial e esta an√°lise √© uma sugest√£o baseada nas informa√ß√µes que voc√™ forneceu. Ela n√£o substitui uma consulta m√©dica de verdade. Por favor, procure um m√©dico para obter um diagn√≥stico preciso e um tratamento adequado."
    """
    
    # MODIFICA√á√ÉO 3: Adicionado tratamento de erros para robustez.
    try:
        logging.info(f"Enviando prompt para a IA para o usu√°rio {user.id}")
        generation_result = model.generate_content(prompt)
        ai_response = generation_result.text

        database.inserir_consulta(user.id, user.first_name, symptoms, ai_response)
        logging.info(f"Consulta salva para o usu√°rio {user.id}")

        await update.message.reply_text(ai_response, reply_markup=ReplyKeyboardRemove())

    except Exception as e:
        logging.error(f"Erro ao processar sintomas para o usu√°rio {user.id}: {e}", exc_info=True)
        await update.message.reply_text(
            "Desculpe, ocorreu um erro ao tentar analisar suas informa√ß√µes. Por favor, tente novamente mais tarde ou use o comando /cancelar."
        )
        return ConversationHandler.END

    # MODIFICA√á√ÉO 4: Mensagem final de encerramento.
    await update.message.reply_text("Espero ter ajudado! Se cuide. Se precisar de algo mais, pode me chamar com o comando /start.")
    return ConversationHandler.END
    
async def como_funciona(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Explica o funcionamento do bot quando o bot√£o correspondente √© clicado."""
        query = update.callback_query
        await query.answer()
        mensagem = (
            "√â simples! Siga os passos:\n\n"
            "1Ô∏è‚É£ **Clique em 'Iniciar Consulta B√°sica'** para come√ßar.\n\n"
            "2Ô∏è‚É£ **Descreva seus sintomas** em uma √∫nica mensagem.\n\n"
            "3Ô∏è‚É£ **Receba orienta√ß√µes b√°sicas** sobre cuidados iniciais e quando procurar um m√©dico.\n\n"
            "‚ö†Ô∏è **Lembre-se:** Este bot n√£o substitui uma consulta m√©dica profissional. Em casos de emerg√™ncia, procure ajuda m√©dica imediatamente.\n\n"
            "Se estiver pronto, clique em 'Iniciar Consulta B√°sica' para come√ßar!"
        )
        await query.edit_message_text(text=mensagem, parse_mode="Markdown")
        return CHOOSING

async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
     """Cancela e sai da conversa."""
     await update.message.reply_text('Opera√ß√£o cancelada. Se precisar de algo, digite /start')
     return ConversationHandler.END

async def text_instead_of_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Informa o usu√°rio para clicar nos bot√µes em vez de digitar."""
    await update.message.reply_text("Por favor, utilize os bot√µes abaixo para navegar. Digite /start para ver as op√ß√µes novamente.")
    return CHOOSING


        