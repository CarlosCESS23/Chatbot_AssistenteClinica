"""
Aqui nesse m√≥dulo cont√©m todas as fun√ß√µes de callback 
(handlers) que respondem √†s intera√ß√µes do usu√°rio no Telegram.

Cada fun√ß√£o √© respons√°vel por uma etapa espec√≠fica do fluxo de conversa do bot.

"""

from telegram import Update, InlineKeyboardMarkup,InlineKeyboardButton
from telegram.ext import ContextTypes,ConversationHandler
import telegram.constants


#Importando os objetos e fun√ß√µes de outros m√≥dulos do pacote

from . import nlp as sintomas
from .config import model,logger


# Definido os estados da conversa para serem usados aqui e no bot.py
CHOOSING, DESCRIBING_SYMPTOMS = range(2)


# PASSO 1: Onde o usu√°rio escrever o /start, esssa fun√ß√£o √© chamada

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Inicia a conversa e mostra o menu de bot√µes."""

    teclado = [
        InlineKeyboardButton("ü©∫ Iniciar Consulta B√°sica", callback_data='iniciar_consulta'),
        InlineKeyboardButton("‚ùì Como funciona?", callback_data='como_funciona')
    ]
    reply_markup = InlineKeyboardMarkup.from_column(teclado)
    mensagem_boas_vindas = "Ol√°, eu sou seu assistente virtual de sa√∫de ü§ñü©∫. \n\nSelecione alguma dessas op√ß√µes abaixo para come√ßar:"
    await update.message.reply_text(mensagem_boas_vindas, reply_markup=reply_markup)

    return CHOOSING

# PASSO 2: Usu√°rio clica no bot√£o de "IniciarConsulta"

async def prompt_for_symptoms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """""Responde ao clique do bot√£o e isso pede ao usu√°rio escrever os sintomas que sente"""
    query = update.callback_query
    await query.answer()


# Aqui edita a mensagem do bot√£o para pedir os sintomas
    await query.edit_message_text(text="Entendido.\n\nPor favor, descreva quais s√£o os sintomas que voc√™ sente nesse momento.")
    
    return DESCRIBING_SYMPTOMS


# Passo 3: Usu√°rio digita os sintomas, e ap√≥s disso a fun√ß√£o √© chamada

async def analyze_symptoms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    # Isso processa a MENSAGEM DE TEXTO com os sintomas do usu√°rio
    texto_usuario = update.message.text
    chat_id = update.message.chat_id


    await context.bot.send_chat_action(chat_id=update.message.chat_id, action=telegram.constants.ChatAction.TYPING)
    
    try:
        sintomas_identificado = sintomas.extrair_sintomas(update.message.text)
        logger.info(f'Sintomas identificados: {update.message.chat_id} - {sintomas_identificado}')
        prompt_for_symptoms = f"""


        pergunta do usu√°rio: {texto_usuario}
        Sintomas identificados pelo an√°lise de NLTK: **{sintomas_identificado}**

        Agora, gere uma resposta de orienta√ß√£o segindo as regras do sistema.
        """
        reponse = model.generate_content(prompt_for_symptoms)

        await update.message.reply_text(reponse.text,parse_mode="Markdown")

    except Exception as e:
        logger.error(f'Erro ao processar a mensagem do usu√°rio {chat_id} - {e}')
        await update.message.reply_text("Desculpe, ocorreu um erro ao processar sua mensagem, tente novamente mais tarde.")

        await update.message.reply_text("Se precisar de mais alguma coisa, digite /start para ver as op√ß√µes novamente. üòä")

        return ConversationHandler.END
    
async def como_funciona(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Explica o funcionamento do bot quando o bot√£o correspondente √© clicado."""
        query = update.callback_query
        await query.answer()
        mensagem = (
            "√â simples! Siga os passos:\n\n"
            "1Ô∏è‚É£ **Clique em 'Iniciar Consulta B√°sica'** para come√ßar.\n\n"
            "2Ô∏è‚É£ **Descreva seus sintomas** em uma √∫nica mensagem.\n\n"
            "3Ô∏è‚É£ **Receba orienta√ß√µes b√°sicas** sobre cuidados iniciais e quando procurar um m√©dico.\n\n"
            "‚ö†Ô∏è **Lembre-se:** Este bot n√£o substitui uma consulta m√©dica profissional. Em casos de emerg√™ncia, procure ajuda m√©dica imediatamente.\n\n"
            "Se estiver pronto, clique em 'Iniciar Consulta B√°sica' para come√ßar!"
        )
        await query.edit_message_text(text=mensagem, parse_mode="Markdown")
        return CHOOSING

async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
     """Cancela e sai da conversa."""
     await update.message.reply_text('Opera√ß√£o cancelada. Se precisar de algo, digite /start')
     return ConversationHandler.END

async def text_instead_of_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Informa o usu√°rio para clicar nos bot√µes em vez de digitar."""
    await update.message.reply_text("Por favor, utilize os bot√µes abaixo para navegar. Digite /start para ver as op√ß√µes novamente.")
    return CHOOSING


        